#ifndef DATA_H
#define DATA_H
#include "../utils/common.h"

typedef u64 time64;
typedef u8* psid;

typedef enum signer_identifier_type{
    SELF = 0,
    CERTIFICATE_DIGEST_WITH_ECDSAP224 = 1,
    CERTIFICATE_DIGEST_WITH_ECDSAP256 = 2,
    CERTIFICATE = 3,
    CERTIFICATE_CHAIN = 4,
    CERTIFICATE_DIGETS_WITH_OTHER_ALGORITHM = 5,
}signer_identifier_type;
//其他的都留给用户，这里这个是一字节


typedef enum content_type{
    UNSECURED = 0,
    SIGNED = 1,
    ENCRYPTED = 2,
    CERTIFICATE_REQUEST = 3,
    CERTIFICATE_RESPONSE = 4,
    ANOYMOUS_CERTIFICATE_RESPONSE = 5,
    CERTIFICATE_REQUSET_ERROR = 6,
    content_typeCRL_REQUEST = 7,
    CRL = 8,
    SIGEND_PARTIAL_PAYLOAD = 9,
    SIGNED_EXTERNAL_PAYLOAD = 10,
    SIGNED_WSA = 11,
    CERTIFACATE_RESPONSE_ACKNOWLEDGMENT = 12,
//注意这个必须是两字节，剩下的指用户可以自定义
}content_type;

typedef struct time64_with_standard_deviation{
    time64 time;
    u8 long_std_dev;
}time64_with_standard_deviation;

typedef enum tbsdata_flags{
    USE_GENERATION_TIME = 1<<0,
    EXPIRES = 1<<1,
    USE_LOCATION = 1<<2,
    EXTENSIONS = 1<<3
}tbsdata_flags;

typedef struct three_d_location{
    s32 latitude;
    s32 longitude;
    u8 elevation[2];
}three_d_location;

typedef struct hashedid8{
    u8 hashedid8[8];
}hashedid8;

typedef enum pk_algorithm{
    ECDSA_NISTP224_WITH_SHA224 = 0,
    ECDSA_NISTP256_WITH_SHA256 = 1,
    ECIES_NISTP256 =2,
}pk_algorithm;

typedef struct signer_identifier{
    signer_identifier_type type;
    union{
        hashedid8 digest;
        certificate certificate;
        struct{
            pk_algorithm algorithm;
            hashedid8 digest;
        }other_algorithm;

        struct u8* varible;
    }u;
} signer_identifier;

typedef struct tobesigned_data{
   tbsdata_flags tf;
   union{
        struct {
            psid psid;
            u8* varible;
        }type_signed,type_signed_partical;
        psid psid;
        u8* varible;
   }u;
   u8 *element;
}tobesigned_data;

typedef struct signature{
    union{
        ecdsa_signature ecdsa_signature;
        u8* signature;
    }u;
}signature;

typedef struct signed_data{
    struct signer_identifier signer;
    struct tobesigned_data unsigned_data;
    struct signature signature;
}signed_data;

typedef struct tobe_encrypted{
    content_type type;
    union{
        u8* plaintext;
        signed_data signed_data;
        certificate_request request;
        tobe_encrypted_certificate_response 
                response;
        tobe_encrypted_anonymous_certificate
                anon_response;
        tobe_encrypted_certificate_request_error
                request_error;
        crl_request crl_request;
        crl crl;
        tobe_encrypted_certificate_response_acknowledgment
                ack;
        u8* other;
    }u;
}tobe_encrypted;

typedef struct aes_ccm_ciphertext{
    u8 nonce[12];
    u8* ccm_ciphertext;
}aes_ccm_ciphertext;

typedef struct ecies_nist_p256_encrypted_key{
    elliptic_curve_point  v;
    u8* c;
    u8 t[20];
}ecies_nist_p256_encrypted;

typedef struct recipient_info{
    hashedid8 cert_id;
    union{
        ecies_nist_p256_encrypted_key enc_key;
        u8* other_key;
    }u;
}reciptient_info;

typedef enum symm_algorithm{
    AES_128_CCM = 0,
}symm_algorithm;

typedef struct encrypted_data{
    symm_algorithm symm_algorithm;
    recipient_info* recipients;
    union{
        aes_ccm_ciphertext ciphertext;
        u8* varible;
    }u;
}encrypted_data;

typedef struct tobesigned_wsa{
    u8* permission_indices;
    tbsdata_flags tf;
    u8* data;
    time64_with_standard_deviation generation_time;
    time64 expire_time;
    three_d_location generation_location;
    u8* element;
}

typedef struct signed_wsa{
    signer_identifier signer;
    tobesigned_wsa unsigned_wsa;
    signature signature;
}signed_wsa;

typedef enum ecc_public_keytype{
    X_COORDINATE_ONLY = 0,
    COMPRESSED_LSB_Y_0 = 2,
    COMPRESSED_LSB_Y_1 = 3,
    UNCOMPRESSED = 4,
}ecc_public_keytype;

typedef struct elliptic_curve_point{
    ecc_public_keytype type;
    u8* x;
    union{
        u8* y;
    }
}elliptic_curve_point;

typedef struct ecdsa_signature{
    elliptic_curve_point r;
    u8* s;
}ecdsa_signature;



typedef enum tbsdata_extension_type{
    //没有相关的类型，等待后面开发
}tbsdata_extension_type;

typedef struct tbsdata_extension{
    tbsdata_extension_type type;
    u8 * value;
}tbsdata_extension;


struct sec_data{
	u8 protocol_version;
	content_type type;
	union
	{
		u8 *data;
		struct signed_data signed_data;
		struct signed_wsa signed_wsa;
		struct encrypted_data encrypted_data;
		struct crl_request crl_request;
		struct crl crl;
	} select_type ;
};
#endif
